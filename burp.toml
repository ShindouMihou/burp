#--------------------
# Burp.toml
#
# This is the official Burp.toml for the Burp deployment tool. You can reference this
# to see how a Burp.toml would appear.
#---------------------
version = 1.0

#------------
# NOTE: When using `bind` with files that only exist on the client-side
# e.g. private configuration files, make sure to use the `.burpy/home/` parent
# folder since Burp drops all the files from `includes` to that directory.
#
# It is recommended to link that directory with burp using
# { type = "bind", source = "path/to/host/folder", target = ".burpy/home/` }
#--------------
#
# Unlike the volumes, this `includes` is actually the development environment.
# So, it will transfer files from the development environment to the server.
#
#-------------
includes = [
    { source = "data/git.toml", target = "data/git.toml" },
    { source = "data/docker.toml", target = "data/docker.toml" },
]

[service]
name = "burp"
build = "/"
repository = "https://github.com/ShindouMihou/burp"
restart_policy = { name = "always" }
volumes = [
    #-----------------------------
    # Burp has special variables when it comes to type = "bind" that are used to help you
    # bind to things, here are the list of them (all of them needs to be in capital):
    #
    # $HOME: translates to the home directory of the server.
    #
    # These variables sadly only apply to the "source" since Burp's scope is limited to the
    # host server, and not the containers' inside working.
    #-----------------------------
    { type = "bind", source = "$HOME/.burpy/", target = "/home/burp/.burpy/home/"},
    { type = "bind", source = "/var/run/docker.sock", target = "/var/run/docker.sock" }
]
ports = [["8873","8873"]]

#------------------------
# Environment Files
#
# Burp have support for transporting environment files from the developer's environment (or the deployer's)
# down to the agent, and also has support for utilizing Burp functions to replace key variables  before
# transporting them.
#
# It reads from a "baseline" file (it can be a `.env.example`, or a `.env` file that contains secrets that
# you've configured), checks this file for any replacements that are needed before transporting it along
# to the server without performing any overrides.
#
# If you want Burp to override the baseline file, you can set the `override` option to true.
# For how to use replacements, you can view the `examples/` folder (https://github.com/ShindouMihou/burp/tree/master/examples/).
#
# If you don't want the developer environment to perform the necessary changes for environment, but rather
# let the server-side handle it (which means that the .env file in the CLI's working directory is ignored), then you can
# set the `server-side` option to "true".
#
# Do note that when `server-side` is "true" then the server will use the clone repository's location as its working directory.
# So, the baseline file would be something like `.burpy/.build/github.com/shindoumihou/burp/.env` (Burp handles it automatically)
# but just a side note.
#------------------------
[environment]
baseline = ".env"
override = false
server-side = false